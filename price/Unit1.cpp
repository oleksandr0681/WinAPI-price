//---------------------------------------------------------------------------
// Програма "Price" призначена для розрахунку ціни продукції.
// Програма "Price" розповсюджується на умовах "як є".
// Усі права на програму "Price" належать автору: Вербі Олександру.
// Ніхто, крім автора, не має права змінювати вихідний код програми.
// При розрахунку рекомендується використання об'єктно-орієнтованого
// програмування.

#include <windows.h>
#include <math.h>
#include <stdio.h>            
#include "dialog.h"
// Визначення констант діалогового вікна.
#include "struct_price.h"
// Структура price, розраховує ціну продукції.

BOOL CALLBACK dialog_function (HWND, UINT, WPARAM, LPARAM);
// Віконна функція діалогового вікна.


//---------------------------------------------------------------------------


WINAPI WinMain
(
	HINSTANCE program_description,
	// Дескриптор (описатель), который Windows присваивает запущенной
	// программе (приложению).
	HINSTANCE prev_program_description,
	// Этот параметр остался для совместимости версий от Windows 3.x, где он
	// использовался для представления дескриптора предыдущего экземпляра
	// программы. В Win32 этот параметр не используется и поэтому всегда
	// принимает нулевое значение.
	LPSTR cmd_line,
	// Указатель на строку, в которую копируются аргументы программы
	// (приложения), если она запущена в режиме командной строки.
	int nCmdShow
	// Целое значение, которое может быть передано функции ShowWindow.
)
{
	static HINSTANCE program_description_for_dialog_box;
	// Статическая переменная. Дескриптор программы. Используется в
	// функции DialogBox().
	program_description_for_dialog_box=GetModuleHandle(NULL);
	// Функция GetModuleHandle извлекает дескриптор указанного модуля.
	// Если параметр - пусто (NULL), GetModuleHandle возвращает
	// дескриптор файла, используемый, чтобы создать вызывающий процесс
	// (.EXE файл).
	DialogBox
	// Функция создаёт и выводит на экран модальное диалоговое окно.
	(
		program_description_for_dialog_box,
		// Дескриптор программы (статическая переменная).
		"price",
		// Имя шаблона диалогового окна.
		NULL,
		// Дескриптор окна владельца, в котором открывается диалоговое
		// окно.
		(DLGPROC)dialog_function
		// Оконная функция для диалогового окна.
	);
	return 0;
}
//---------------------------------------------------------------------------

BOOL CALLBACK dialog_function
// Віконна функція діалогового вікна.
(
	HWND dialog_window_description,
	// Параметр содержит дескриптор диалогового окна "Расчёт стоимости
	// изготовления изделия", получающего сообщение.
	UINT message,
	// Параметр указывает идентификатор сообщения.
	WPARAM wparam,
	LPARAM lparam
	// Третий и четвёртый параметры содержат дополнительную информацию,
	// которая распознаётся системой в зависимости от типа полученного
	// сообщения.
)
{
	HWND help_description=0;
	static char text[3072]="";
	static float prime_cost=3729.60, profit=559.44, TAC=857.81, tax=900.0;
	static float excise=0, sale_increase=0, trade_increase=0;
	static float production_price=0;
	bool input_range=true;
	price calculation_1
	(
		3729.60,
		// Собівартість продукції, грн.
		559.44,
		// Прибуток, грн.
		857.81,
		// Податок на додану вартість (ПДВ), грн.
		900.0,
		// Інші податки та взноси у соцфонди, грн.
		0.0,
		// Акцизний збір, грн.
		0.0,
		// Оптово-збутова надбавка, грн.
		0.0
		// Торгівельна надбавка, грн.
	);
	static char file[1024]="";
	static OPENFILENAME file_name;
	bool file_name_present=false;
	static bool calculation_execute=false;
	HANDLE file_handle;
	DWORD number_to_write=0;
	DWORD number_written=0;
	static char program_dir[1024];
	/*
	help_description	- дескриптор окна справочной информации.	
	text				- массив для хранения текста.
	prime_cost			- собівартість продукції, грн.
	profit				- прибуток, грн.
	TAC					- податок на додану вартість (ПДВ), грн.
	tax					- інші податки та взноси у соцфонди, грн.
	excise				- акцизний збір, грн.
	sale_increase		- гуртово-збутова надбавка, грн.
	trade_increase		- торгівельна надбавка, грн.
	production_price	- ціна продукції, грн.
	input_range			- індикатор відхилень від допустимих значень.
	calculation_1		- об'єкт структури price для розрахунку
						  ціни продукції, грн.
	file				- массив для стандартного диалогового окна
							"Save As".
	file_name 			- структура типа FILENAME для стандартного
							диалогового окна "Save As".
	file_name_present	- индикатор присутствия имени файла.
	calculation_execute	- индикатор выполнения расчёта.	
	file_handle			- дескриптор (описатель) файла.
	number_to_write		- объём записываемых данных.
	number_written		- фактический размер записанных данных.
	program_dir			- масив для зберігання шляху до програми.
	*/
	switch(message)
	// Обычно программист использует оператор switch для определения того,
	// какое сообщение получено и как его обрабатывать.
	// Для всех сообщений, не обрабатываемых в программе, надо просто
	// завершить оконную функцию, вернув значение FALSE.
	// Таким образом, программист пишет код только для тех сообщений,
	// которые нуждаются в нестандартной обработке.
	{
	case WM_INITDIALOG:
	// Сообщение о создании диалогового окна.
		// Инициализация структуры file_name.
		file_name.lStructSize=sizeof(OPENFILENAME);
		// Параметр определяет длину структуры в байтах.
		file_name.hwndOwner=dialog_window_description;
		// Дескриптор окна, владеющего диалоговым окно.
		file_name.lpstrFilter="Текстовые файлы *.txt\0*.txt\0Все файлы\0"
		"*.*\0\0";
		// Указатель на буфер, в котором находятся пары нуль-терминированных
		// (null-terminated) строк для фильтра.
		file_name.lpstrFile=file;
		// Указатель на буфер, который содержит полный путь, имя и
		// расширение файла, введённого в поле "Имя файла" функции
		// GetSaveFileName.
		file_name.nMaxFile=sizeof(file);
		// Определяет размер буфера, на который указывает параметр lpstrFile.
		file_name.lpstrDefExt="txt";
		// Указатель на буфер, в котором находится расширение по умолчанию.
		GetCurrentDirectory
		// Функція отримує поточний каталог. В даному випадку функція отримує
		// каталог, з якого запущена програма.
		(
			sizeof(program_dir),
			// Розмір буферу.
			program_dir
			// покажчик (указатель) на буфер.
			// Каталог, де знаходиться програма.
		);
		return TRUE;
	case WM_COMMAND:
	// Сообщение посылается, когда пользователь выбирает команду
	//диалогового окна.
		switch (LOWORD(wparam))
		{
		case ID_CALCULATION:
		// Сообщение о нажатии кнопки "Розрахувати".
			GetDlgItemText
			// Функция получает текст из любого элемента управления.
			// Причёт ей совсем неважно, кнопка это, поле ввода или
			// статическая метка.
			(
				dialog_window_description,
				// Дескриптор диалогового окна.
				ID_PRIME_COST,
				// Идентификатор элемента управления, из которого получаем
				// данные.
				// Собівартість продукції, грн.
				text,
				// Строка, в которую помещается текст.
				20
				// Длина строки.
			);
			prime_cost=atof(text);
			// Функция переводит строку в формат числа с плавающей точкой.
			GetDlgItemText
			// Функция получает текст из любого элемента управления.
			// Причёт ей совсем неважно, кнопка это, поле ввода или
			// статическая метка.
			(
				dialog_window_description,
				// Дескриптор диалогового окна.
				ID_PROFIT,
				// Идентификатор элемента управления, из которого получаем
				// данные.
				// Прибуток, грн.
				text,
				// Строка, в которую помещается текст.
				20
				// Длина строки.
			);
			profit=atof(text);
			// Функция переводит строку в формат числа с плавающей точкой.
			GetDlgItemText
			// Функция получает текст из любого элемента управления.
			// Причёт ей совсем неважно, кнопка это, поле ввода или
			// статическая метка.
			(
				dialog_window_description,
				// Дескриптор диалогового окна.
				ID_TAC,
				// Идентификатор элемента управления, из которого получаем
				// данные.
				// Податок на додану вартість (ПДВ), грн.
				text,
				// Строка, в которую помещается текст.
				20
				// Длина строки.
			);
			TAC=atof(text);
			// Функция переводит строку в формат числа с плавающей точкой.
			GetDlgItemText
			// Функция получает текст из любого элемента управления.
			// Причёт ей совсем неважно, кнопка это, поле ввода или
			// статическая метка.
			(
				dialog_window_description,
				// Дескриптор диалогового окна.
				ID_TAX,
				// Идентификатор элемента управления, из которого получаем
				// данные.
				// Інші податки та взноси у соцфонди, грн.
				text,
				// Строка, в которую помещается текст.
				20
				// Длина строки.
			);
			tax=atof(text);
			// Функция переводит строку в формат числа с плавающей точкой.
			GetDlgItemText
			// Функция получает текст из любого элемента управления.
			// Причёт ей совсем неважно, кнопка это, поле ввода или
			// статическая метка.
			(
				dialog_window_description,
				// Дескриптор диалогового окна.
				ID_EXCISE,
				// Идентификатор элемента управления, из которого получаем
				// данные.
				// Акцизний збір, грн.
				text,
				// Строка, в которую помещается текст.
				20
				// Длина строки.
			);
			excise=atof(text);
			// Функция переводит строку в формат числа с плавающей точкой.
			GetDlgItemText
			// Функция получает текст из любого элемента управления.
			// Причёт ей совсем неважно, кнопка это, поле ввода или
			// статическая метка.
			(
				dialog_window_description,
				// Дескриптор диалогового окна.
				ID_SALE_INCREASE,
				// Идентификатор элемента управления, из которого получаем
				// данные.
				// Оптово-збутова надбавка, грн.
				text,
				// Строка, в которую помещается текст.
				20
				// Длина строки.
			);
			sale_increase=atof(text);
			// Функция переводит строку в формат числа с плавающей точкой.
			GetDlgItemText
			// Функция получает текст из любого элемента управления.
			// Причёт ей совсем неважно, кнопка это, поле ввода или
			// статическая метка.
			(
				dialog_window_description,
				// Дескриптор диалогового окна.
				ID_TRADE_INCREASE,
				// Идентификатор элемента управления, из которого получаем
				// данные.
				// Торгівельна надбавка, грн.
				text,
				// Строка, в которую помещается текст.
				20
				// Длина строки.
			);
			trade_increase=atof(text);
			// Функция переводит строку в формат числа с плавающей точкой.
			if (prime_cost<0 || prime_cost>100000000)
			// Проверка введённого значения в поле "Собівартість
			// продукції, грн.".
			{
				input_range=false;
				sprintf
				(
					text,
					"Собівартість продукції менша 0 або "
					"більша 100000000 грн."
				);
				MessageBox
				(
					dialog_window_description,
					// Дескриптор диалогового окна.
					text,
					// Указатель на строку, содержащую текст сообщения.
					"Помилка вводу",
					// Указатель на строку, содержащую текст заголовка
					// диалогового окна.
					MB_ICONWARNING
					// Параметр задаёт количество и типы кнопок в
					// диалоговом окне, а также наличие заданной пиктограммы.
				);
			}
			if (profit<0 || profit>100000000)
			// Проверка введённого значения в поле "Прибуток, грн.".
			{
				input_range=false;
				sprintf
				(
					text,
					"Прибуток менший 0 або більший 100000000 грн."
				);
				MessageBox
				(
					dialog_window_description,
					// Дескриптор диалогового окна.
					text,
					// Указатель на строку, содержащую текст сообщения.
					"Помилка вводу",
					// Указатель на строку, содержащую текст заголовка
					// диалогового окна.
					MB_ICONWARNING
					// Параметр задаёт количество и типы кнопок в
					// диалоговом окне, а также наличие заданной пиктограммы.
				);
			}
			if (TAC<0 || TAC>100000000)
			// Проверка введённого значения в поле "Податок на
			// додану вартість (ПДВ), грн.".
			{
				input_range=false;
				sprintf
				(
					text,
					"Податок на додану вартість (ПДВ) "
					"менший 0 або більший 100000000 грн."
				);
				MessageBox
				(
					dialog_window_description,
					// Дескриптор диалогового окна.
					text,
					// Указатель на строку, содержащую текст сообщения.
					"Помилка вводу",
					// Указатель на строку, содержащую текст заголовка
					// диалогового окна.
					MB_ICONWARNING
					// Параметр задаёт количество и типы кнопок в
					// диалоговом окне, а также наличие заданной пиктограммы.
				);
			}
			if (tax<0 || tax>100000000)
			// Проверка введённого значения в поле "Інші податки та
			// взноси у соцфонди, грн.".
			{
				input_range=false;
				sprintf
				(
					text,
					"Інші податки та взноси у соцфонди "
					"менші 0 або більші 100000000 грн."
				);
				MessageBox
				(
					dialog_window_description,
					// Дескриптор диалогового окна.
					text,
					// Указатель на строку, содержащую текст сообщения.
					"Помилка вводу",
					// Указатель на строку, содержащую текст заголовка
					// диалогового окна.
					MB_ICONWARNING
					// Параметр задаёт количество и типы кнопок в
					// диалоговом окне, а также наличие заданной пиктограммы.
				);
			}
			if (excise<0 || excise>100000000)
			// Проверка введённого значения в поле "Акцизний збір, грн.".
			{
				input_range=false;
				sprintf
				(
					text,
					"Акцизний збір менший 0 або "
					"більший 100000000 грн."
				);
				MessageBox
				(
					dialog_window_description,
					// Дескриптор диалогового окна.
					text,
					// Указатель на строку, содержащую текст сообщения.
					"Помилка вводу",
					// Указатель на строку, содержащую текст заголовка
					// диалогового окна.
					MB_ICONWARNING
					// Параметр задаёт количество и типы кнопок в
					// диалоговом окне, а также наличие заданной пиктограммы.
				);
			}
			if (sale_increase<0 || sale_increase>100000000)
			// Проверка введённого значения в поле "Оптово-збутова
			// надбавка, грн.".
			{
				input_range=false;
				sprintf
				(
					text,
					"Оптово-збутова надбавка менша 0 або "
					"більша 100000000 грн."
				);
				MessageBox
				(
					dialog_window_description,
					// Дескриптор диалогового окна.
					text,
					// Указатель на строку, содержащую текст сообщения.
					"Помилка вводу",
					// Указатель на строку, содержащую текст заголовка
					// диалогового окна.
					MB_ICONWARNING
					// Параметр задаёт количество и типы кнопок в
					// диалоговом окне, а также наличие заданной пиктограммы.
				);
			}
			if (trade_increase<0 || trade_increase>100000000)
			// Проверка введённого значения в поле "Торгівельна
			// надбавка, грн.".
			{
				input_range=false;
				sprintf
				(
					text,
					"Торгівельна надбавка менша 0 або "
					"більша 100000000 грн."
				);
				MessageBox
				(
					dialog_window_description,
					// Дескриптор диалогового окна.
					text,
					// Указатель на строку, содержащую текст сообщения.
					"Помилка вводу",
					// Указатель на строку, содержащую текст заголовка
					// диалогового окна.
					MB_ICONWARNING
					// Параметр задаёт количество и типы кнопок в
					// диалоговом окне, а также наличие заданной пиктограммы.
				);
			}
			if (input_range==true)
			// Проверка значений переменных. Расчёт выполняется если все
			// переменные имеют допустимые значения.
			{
				// Розрахунок ціни продукції, грн.
				calculation_1.set_prime_cost(prime_cost);
				// Присвоєння об'єкту calculation_1 собівартості
				// продукції, грн.
				calculation_1.set_profit(profit);
				// Присвоєння об'єкту calculation_1 прибутку, грн.
				calculation_1.set_TAC(TAC);
				// Присвоєння об'єкту calculation_1 податку
				// на додану вартість (ПДВ), грн.
				calculation_1.set_tax(tax);
				// Присвоєння об'єкту calculation_1 інших податків
				// та взносів у соцфонди, грн.
				calculation_1.set_excise(excise);
				// Присвоєння об'єкту calculation_1 акцизного збору, грн.
				calculation_1.set_sale_increase(sale_increase);
				// Присвоєння об'єкту calculation_1
				// оптово-збутової надбавки, грн.
				calculation_1.set_trade_increase(trade_increase);
				// Присвоєння об'єкту calculation_1 торгівельної
				// надбавки, грн.
				production_price=calculation_1.calculation();
				// Розрахунок ціни продукції, грн.
				gcvt
				// Функция преобразует число с плавающей точкой в строку.
				(
					production_price,
					20,
					text
				);
				SetDlgItemText
				// Функция записывает текст в элемент управления.
				(
					dialog_window_description,
					// Дескриптор диалогового окна.
					ID_PRICE,
					// Идентификатор элемента управления, в который
					// записываются данные.
					text
					// Строка, из которой записывается текст.
				);
				calculation_execute=true;				
			}
			return true;
		case ID_SAVE:
		// Сообщение о нажатии кнопки "Зберегти розрахунок".
			strcpy(file, "");
			// Функция копирует содержимое строки в указанный буфер. В
			// данном случае функция очищает содержимое переменной file.
			if (calculation_execute==true)
			// Перевірка викорання розрахунку.
			{
				file_name_present=GetSaveFileName(&file_name);
				// Функция создаёт стандартное диалоговое окно "Save As".
			}
			if (file_name_present==true)
			// Проверка присутствия имени файла.
			{
				file_handle=CreateFile
				// Функция создаёт указатель на новоe устройство (файл).
				(
					file_name.lpstrFile, // Указатель на имя файла.
					//(устройства).
					GENERIC_READ | GENERIC_WRITE,
					// Параметры определяют доступ на чтение и запись.
					FILE_SHARE_READ | FILE_SHARE_WRITE,
					// Общий доступ на чтение и запись к данному файлу.
					// То есть файл будет доступен при одновременном
					// использовании несколькими процессами.
					NULL,
					// Атрибут безопасности неопределён. То есть все
					// дескрипторы будут доступны дочерним процессам
					// вашей программы.
					CREATE_ALWAYS,
					// Параметр указывает на создание нового файла. Если файл
					// существует, то он будет перезаписан.
					FILE_ATTRIBUTE_NORMAL,
					// Параметр FILE_ATTRIBUTE_NORMAL определяет файлу
					//стандартные атрибуты.
					NULL
					// Шаблоны не используются.
				);
				sprintf
				// Функция записывает в массив text результат расчёта
				// приведенной стоимости одного часа работы установки.
				(
					text,
					"Розрахунок ціни продукції.\n\n"
					"Ціна продукції P, грн,\n\n P=PC+Pf+TAC+T+E+SI+TI,\n\n"
					"де\n"
					"PC - собівартість продукції, грн;\n"
					"Pf - прибуток, грн;\n"
					"TAC - податок на додану вартість (ПДВ), грн;\n"
					"T - інші податки та взноси у соцфонди, грн;\n"
					"E - акцизний збір, грн;\n"
					"SI - гуртово-збутова надбавка, грн;\n"
					"TI - торгівельна надбавка, грн.\n\n"
					"P=%f, грн;\n\n"
					"PC=%f, грн;\n"
					"Pf=%f, грн;\n"
					"TAC=%f, грн;\n"
					"T=%f, грн;\n"
					"E=%f, грн;\n"
					"SI=%f, грн;\n"
					"TI=%f, грн.\n",
					production_price, prime_cost, profit, TAC, tax, excise,
					sale_increase, trade_increase
				);
				number_to_write=strlen(text);
				WriteFile
				// Запись в файл результата расчёта.
				(
					file_handle,	// Дескриптор (описатель) файла.
					text,			// Указатель на буфер - откуда записываем
									// данные в файл.
					number_to_write,// объём записываемых данных.
					&number_written,// фактический размер записанных данных.
					NULL			// Флаг режима доступа к файлу.
				);
				CloseHandle(file_handle);
				// Функция освобождает указатель на устройство (файл).
			}
			return true;
		case ID_HELP:
		// Сообщение о нажатии кнопки "Довідка".
			SetCurrentDirectory(program_dir);
			// Функція встановлює поточний каталог. В даному випадку встановлює
			// поточним каталог програми (з файлом довідки). Функція
			// застосована щоб довідка відкривалась після збереження
			// результатів розрахунку.
			help_description=FindWindow
			// Функция получает дескриптор окна.
			(
				"HH Parent",
				// Тип окна.
				"price"
				// Текст в заголовке окна.
			);
			if (help_description==0)
			// Проверка существования окна справочной информации.
			{
				WinExec
				// Функция обеспечивает запуск внешних программ.
				(
					"hh.exe price.chm",
					// Командна запуска программы.
					SW_RESTORE
					// Режим отображения окна, в котором программа должна
					// работать.
				);
			}
			else
        	// Открыто окно справочной информации.
			{
				ShowWindow
            	// Функция отображает окно на экране.
				(
					help_description,
					// Дескриптор окна.
                	SW_RESTORE
					// Параметр определяет, в каком виде будет показано
					// окно функцией ShowWindow.
				);
            	SetForegroundWindow (help_description);
				// Функция перемещает окно на передний план.    
			}
			return true;
		case ID_EXIT:
		// Сообщение о нажатии кнопки "Выход".
			help_description=FindWindow
			// Функция получает дескриптор окна.
			(
				"HH Parent",
				// Тип окна.
				"price"
				// Текст в заголовке окна.
			);
			if (help_description!=0)
			// Проверка существования окна справочной информации.
			// Открыто окно справочной информации.
			{
				SendMessage
				// Функция посылает сообщение указанному окну.
				(
					help_description,
					// Дескриптор окна-получателя.
					WM_CLOSE,
					// Сообщение уведомляет окно о том, что оно должно
					// быть закрыто.
					0,
					// Первый параметр сообщения.
					0
					// Второй параметр сообщения.
				);
			}
			InvalidateRect
			// Функция генерирует сообщение WM_PAINT.
			(
				NULL,
				// Дескриптор окна, у которого изменился обновляемый регион.
				// Если этот параметр равен NULL, то система обновляет и
				// перерисовывает все окна программы.
				NULL,
				// Указатель на структуру типа RECT, содержащую клиентские
				// координаты прямоугольника, который добавляется к
				// обновляемому региону. Если этот параметр равен NULL, то
            	// к обновляемому региону добавляется вся клиентская область.
				FALSE
				// Флаг, определяющий, будет ли стираться фон обновляемого
				//региона.
			);
			EndDialog
			// Функция закрывает диалоговое окно и завершает выполнение
			// функции DialogBox().
			(
				dialog_window_description,
				// Дескриптор диалогового окна.
				0
				// Значение, которое передаётся функции DialogBox.
			);
			return TRUE;
		case IDCANCEL:
		// Сообщение о нажатии сочетания клавиш Alt+F4.
			help_description=FindWindow
			// Функция получает дескриптор окна.
			(
				"HH Parent",
				// Тип окна.
				"price"
				// Текст в заголовке окна.
			);
			if (help_description!=0)
			// Проверка существования окна справочной информации.
			// Открыто окно справочной информации.
			{
				SendMessage
				// Функция посылает сообщение указанному окну.
				(
					help_description,
					// Дескриптор окна-получателя.
					WM_CLOSE,
					// Сообщение уведомляет окно о том, что оно должно
					// быть закрыто.
					0,
					// Первый параметр сообщения.
					0
					// Второй параметр сообщения.
				);
			}
			InvalidateRect
			// Функция генерирует сообщение WM_PAINT.
			(
				NULL,
				// Дескриптор окна, у которого изменился обновляемый регион.
				// Если этот параметр равен NULL, то система обновляет и
				// перерисовывает все окна программы.
				NULL,
				// Указатель на структуру типа RECT, содержащую клиентские
				// координаты прямоугольника, который добавляется к
				// обновляемому региону. Если этот параметр равен NULL, то
            	// к обновляемому региону добавляется вся клиентская область.
				FALSE
				// Флаг, определяющий, будет ли стираться фон обновляемого
				//региона.
			);
			EndDialog
			// Функция закрывает диалоговое окно и завершает выполнение
			// функции DialogBox().
			(
				dialog_window_description,
				// Дескриптор диалогового окна.
				0
				// Значение, которое передаётся функции DialogBox.
			);
			return TRUE;

		}
		return TRUE;		
	default:
		break;
	}
	return FALSE;
	// Для всех сообщений, не обрабатываемых в программе, надо просто
	// завершить оконную функцию, вернув значение FALSE.
}

